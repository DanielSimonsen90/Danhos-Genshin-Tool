import { app, BrowserWindow, session, ipcMain, Menu, shell } from 'electron';
import installExtension, { REACT_DEVELOPER_TOOLS } from 'electron-devtools-installer';
import path from 'path';
import UpdateService from './services/UpdateService';
import { PROJECT_GITHUB_URL } from './common/constants/domain';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

app.whenReady().then(() => installExtension(REACT_DEVELOPER_TOOLS));

// Setup IPC handlers for update functionality
const setupIPCHandlers = (): void => {
  ipcMain.handle('check-for-updates', () => UpdateService.checkForUpdates(false));
  ipcMain.handle('get-app-version', () => app.getVersion());
    // LocalStorage import/export IPC handlers (full data backup/restore)
  ipcMain.handle('get-all-localstorage-data', async (event) => {
    try {
      const result = await event.sender.executeJavaScript(`
        (() => {
          const data = {};
          for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key) {
              try {
                const value = localStorage.getItem(key);
                data[key] = value ? JSON.parse(value) : value;
              } catch (parseError) {
                // If it's not valid JSON, store as string
                data[key] = localStorage.getItem(key);
              }
            }
          }
          return data;
        })()
      `);
      return result;
    } catch (error) {
      console.error('Failed to get all localStorage data:', error);
      return null;
    }
  });
  
  ipcMain.handle('set-all-localstorage-data', async (event, data) => {
    try {
      await event.sender.executeJavaScript(`
        (() => {
          // Clear existing localStorage
          localStorage.clear();
          
          // Set all new data
          const data = ${JSON.stringify(data)};
          for (const [key, value] of Object.entries(data)) {
            try {
              localStorage.setItem(key, typeof value === 'string' ? value : JSON.stringify(value));
            } catch (error) {
              console.error('Failed to set localStorage item:', key, error);
            }
          }
        })()
      `);
      return true;
    } catch (error) {
      console.error('Failed to set all localStorage data:', error);
      throw error;
    }
  });
};

// Setup application menu
const setupApplicationMenu = (): void => {
  const template: Electron.MenuItemConstructorOptions[] = [
    {
      label: 'File',
      submenu: [
        {
          label: 'New Window',
          accelerator: process.platform === 'darwin' ? 'Cmd+N' : 'Ctrl+N',
          click: () => createWindow(),
        },
        { type: 'separator' },
        {
          label: 'Quit',
          accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
          click: () => app.quit(),
        },
      ],
    },
    {
      label: 'View',
      submenu: [
        {
          label: 'Reload',
          accelerator: process.platform === 'darwin' ? 'Cmd+R' : 'Ctrl+R',
          click: (item, focusedWindow) => {
            if (focusedWindow) focusedWindow.webContents.reload();
          },
        },
        {
          label: 'Force Reload',
          accelerator: process.platform === 'darwin' ? 'Cmd+Shift+R' : 'Ctrl+Shift+R',
          click: (item, focusedWindow) => {
            if (focusedWindow) focusedWindow.webContents.reloadIgnoringCache();
          },
        },
        { type: 'separator' },
        {
          label: 'Back',
          accelerator: process.platform === 'darwin' ? 'Cmd+Left' : 'Alt+Left',
          click: (item, focusedWindow) => {
            if (focusedWindow && focusedWindow.webContents.canGoBack()) {
              focusedWindow.webContents.goBack();
            }
          },
        },
        {
          label: 'Forward',
          accelerator: process.platform === 'darwin' ? 'Cmd+Right' : 'Alt+Right',
          click: (item, focusedWindow) => {
            if (focusedWindow && focusedWindow.webContents.canGoForward()) {
              focusedWindow.webContents.goForward();
            }
          },
        },
        {
          label: 'Home',
          accelerator: process.platform === 'darwin' ? 'Cmd+H' : 'Ctrl+H',
          click: (item, focusedWindow) => {
            if (focusedWindow) {
              focusedWindow.webContents.executeJavaScript(`
                if (window.location.hash !== '#/') {
                  window.location.hash = '#/';
                }
              `);
            }
          },
        },
        { type: 'separator' },
        {
          label: 'Actual Size',
          accelerator: process.platform === 'darwin' ? 'Cmd+0' : 'Ctrl+0',
          click: (item, focusedWindow) => {
            if (focusedWindow) focusedWindow.webContents.setZoomLevel(0);
          },
        },
        {
          label: 'Zoom In',
          accelerator: process.platform === 'darwin' ? 'Cmd+Plus' : 'Ctrl+Plus',
          click: (item, focusedWindow) => {
            if (focusedWindow) {
              const currentZoom = focusedWindow.webContents.getZoomLevel();
              focusedWindow.webContents.setZoomLevel(currentZoom + 1);
            }
          },
        },
        {
          label: 'Zoom Out',
          accelerator: process.platform === 'darwin' ? 'Cmd+-' : 'Ctrl+-',
          click: (item, focusedWindow) => {
            if (focusedWindow) {
              const currentZoom = focusedWindow.webContents.getZoomLevel();
              focusedWindow.webContents.setZoomLevel(currentZoom - 1);
            }
          },
        },
        { type: 'separator' },
        {
          label: 'Toggle Fullscreen',
          accelerator: process.platform === 'darwin' ? 'Ctrl+Cmd+F' : 'F11',
          click: (item, focusedWindow) => {
            if (focusedWindow) {
              focusedWindow.setFullScreen(!focusedWindow.isFullScreen());
            }
          },
        },
      ],
    },    {
      label: 'Tools',
      submenu: [
        {
          label: 'Clear Cache',
          click: async (item, focusedWindow) => {
            if (focusedWindow) {
              const { dialog } = require('electron');
              const result = await dialog.showMessageBox(focusedWindow, {
                type: 'question',
                title: 'Clear Cache',
                message: 'Are you sure you want to clear the application cache?',
                detail: 'This will reload the application and may improve performance.',
                buttons: ['Clear Cache', 'Cancel'],
                defaultId: 1,
                cancelId: 1,
              });
              
              if (result.response === 0) {
                await focusedWindow.webContents.session.clearCache();
                focusedWindow.webContents.reload();
              }
            }
          },
        },
        {
          label: 'Clear Storage Data',
          click: async (item, focusedWindow) => {
            if (focusedWindow) {
              const { dialog } = require('electron');
              const result = await dialog.showMessageBox(focusedWindow, {
                type: 'warning',
                title: 'Clear Storage Data',
                message: 'Are you sure you want to clear all stored data?',
                detail: 'This will remove all your settings and data. This action cannot be undone.',
                buttons: ['Clear Data', 'Cancel'],
                defaultId: 1,
                cancelId: 1,
              });
              
              if (result.response === 0) {
                await focusedWindow.webContents.session.clearStorageData();
                focusedWindow.webContents.reload();
              }
            }
          },
        },        { type: 'separator' },        {
          label: 'Export Data',
          click: async (item, focusedWindow) => {
            if (!focusedWindow) return;
            
            const { dialog } = require('electron');
            const fs = require('fs').promises;
            
            const result = await dialog.showSaveDialog(focusedWindow, {
              title: 'Export All Data',
              defaultPath: 'genshin-tool-data.json',
              filters: [
                { name: 'JSON Files', extensions: ['json'] },
                { name: 'All Files', extensions: ['*'] }
              ]
            });
            
            if (!result.canceled && result.filePath) {
              try {
                // Get all localStorage data via IPC
                const localStorageData = await focusedWindow.webContents.executeJavaScript(`
                  (() => {
                    const data = {};
                    for (let i = 0; i < localStorage.length; i++) {
                      const key = localStorage.key(i);
                      if (key) {
                        try {
                          const value = localStorage.getItem(key);
                          data[key] = value ? JSON.parse(value) : value;
                        } catch (parseError) {
                          // If it's not valid JSON, store as string
                          data[key] = localStorage.getItem(key);
                        }
                      }
                    }
                    return data;
                  })()
                `);
                
                console.log('Raw localStorage data:', localStorageData);
                
                if (!localStorageData || Object.keys(localStorageData).length === 0) {
                  await dialog.showMessageBox(focusedWindow, {
                    type: 'warning',
                    title: 'No Data Found',
                    message: 'No data found to export.',
                    buttons: ['OK']
                  });
                  return;
                }
                
                // Validate and filter the localStorage data
                const validation = validateAndFilterLocalStorageData(localStorageData);
                console.log('Validation result:', validation);
                
                if (!validation.valid) {
                  await dialog.showMessageBox(focusedWindow, {
                    type: 'warning',
                    title: 'Data Validation Issue',
                    message: 'There was an issue with your data.',
                    detail: validation.error || 'Unknown validation error',
                    buttons: ['OK']
                  });
                  return;
                }
                
                // Add metadata to the export
                const exportData = {
                  exportedAt: new Date().toISOString(),
                  appVersion: await focusedWindow.webContents.executeJavaScript('navigator.userAgent'),
                  data: validation.filtered
                };
                
                await fs.writeFile(result.filePath, JSON.stringify(exportData, null, 2));
                
                // Show success message with warnings if any
                const hasWarnings = validation.warnings && validation.warnings.length > 0;
                await dialog.showMessageBox(focusedWindow, {
                  type: 'info',
                  title: 'Export Successful',
                  message: 'All data exported successfully!' + 
                    (hasWarnings ? '\n\nNote: Some data was automatically corrected during export.' : ''),
                  detail: hasWarnings ? `Warnings: ${validation.warnings?.join(', ')}` : undefined,
                  buttons: ['OK']
                });
              } catch (error) {
                await dialog.showMessageBox(focusedWindow, {
                  type: 'error',
                  title: 'Export Failed',
                  message: 'Failed to export data.',
                  detail: error instanceof Error ? error.message : 'Unknown error occurred',
                  buttons: ['OK']
                });
              }
            }
          },        },
        {
          label: 'Import Data',
          click: async (item, focusedWindow) => {
            if (!focusedWindow) return;
            
            const { dialog } = require('electron');
            const fs = require('fs').promises;
            
            const result = await dialog.showOpenDialog(focusedWindow, {
              title: 'Import Data',
              filters: [
                { name: 'JSON Files', extensions: ['json'] },
                { name: 'All Files', extensions: ['*'] }
              ],
              properties: ['openFile']
            });
            
            if (!result.canceled && result.filePaths.length > 0) {
              try {
                const importData = await fs.readFile(result.filePaths[0], 'utf8');
                const parsedData = JSON.parse(importData); // Validate JSON format
                
                console.log('Import data:', parsedData);
                
                // Handle different import formats
                let dataToImport;
                if (parsedData.data && parsedData.exportedAt) {
                  // New format with metadata
                  dataToImport = parsedData.data;
                } else {
                  // Legacy format or direct data
                  dataToImport = parsedData;
                }
                
                // Validate and filter the imported data
                const validation = validateAndFilterLocalStorageData(dataToImport);
                
                if (!validation.valid) {
                  await dialog.showMessageBox(focusedWindow, {
                    type: 'error',
                    title: 'Invalid Data File',
                    message: 'The data file contains invalid information.',
                    detail: validation.error || 'Unknown validation error',
                    buttons: ['OK']
                  });
                  return;
                }
                
                // Confirm before importing
                const confirmResult = await dialog.showMessageBox(focusedWindow, {
                  type: 'warning',
                  title: 'Confirm Import',
                  message: 'This will replace all your current data with the imported data.',
                  detail: 'Are you sure you want to continue? This action cannot be undone.',
                  buttons: ['Import', 'Cancel'],
                  defaultId: 1,
                  cancelId: 1
                });
                
                if (confirmResult.response !== 0) return;
                
                // Set all data in localStorage via IPC
                await focusedWindow.webContents.executeJavaScript(`
                  (() => {
                    // Clear existing localStorage
                    localStorage.clear();
                    
                    // Set all new data
                    const data = ${JSON.stringify(validation.filtered)};
                    for (const [key, value] of Object.entries(data)) {
                      try {
                        localStorage.setItem(key, typeof value === 'string' ? value : JSON.stringify(value));
                      } catch (error) {
                        console.error('Failed to set localStorage item:', key, error);
                      }
                    }
                  })()
                `);
                
                const restartResult = await dialog.showMessageBox(focusedWindow, {
                  type: 'info',
                  title: 'Import Successful',
                  message: 'Data imported successfully!',
                  detail: 'The application needs to restart to apply the new data.',
                  buttons: ['Restart Now', 'Restart Later'],
                  defaultId: 0
                });
                
                if (restartResult.response === 0) {
                  app.relaunch();
                  app.exit();
                }
              } catch (error) {
                await dialog.showMessageBox(focusedWindow, {
                  type: 'error',
                  title: 'Import Failed',
                  message: 'Failed to import data.',
                  detail: error instanceof Error ? error.message : 'The file may be corrupted or in an invalid format.',                  buttons: ['OK']
                });
              }
            }
          },
        },      ],
    },
    {
      label: 'Help',
      submenu: [
        {
          label: 'Check for Updates',
          click: () => UpdateService.checkForUpdates(),
        },
        {
          label: 'Toggle Developer Tools',
          accelerator: process.platform === 'darwin' ? 'Cmd+Option+I' : 'Ctrl+Shift+I',
          click: (item, focusedWindow) => {
            if (focusedWindow) focusedWindow.webContents.toggleDevTools();
          },
        },
        { type: 'separator' },
        {
          label: 'GitHub Repository',
          click: () => shell.openExternal(PROJECT_GITHUB_URL),
        },
      ],
    },
  ];

  // macOS specific menu adjustments
  if (process.platform === 'darwin') {
    template.unshift({
      label: app.getName(),
      submenu: [
        { role: 'about' },
        { type: 'separator' },
        { role: 'services' },
        { type: 'separator' },
        { role: 'hide' },
        { role: 'hideOthers' },
        { role: 'unhide' },
        { type: 'separator' },
        { role: 'quit' },
      ],
    });
  }

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // Set the main window for the update service
  UpdateService.setMainWindow(mainWindow);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (process.env.NODE_ENV === 'development') mainWindow.webContents.openDevTools();

  // Set up application menu with update option
  setupApplicationMenu();

  // Check for updates after the window is ready (delay to ensure proper initialization)
  mainWindow.webContents.once('did-finish-load', () => {
    setTimeout(() => {
      UpdateService.checkForUpdates();
    }, UpdateService.CHECK_FOR_UPDATE_DELAY_MS); // Wait 3 seconds after app launch
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  // Setup IPC handlers
  setupIPCHandlers();

  // Customize protocol to handle static resource.
  session.defaultSession.protocol.registerFileProtocol('static', (request, callback) => {
    const fileUrl = request.url.replace('static://', '');
    const filePath = path.join(app.getAppPath(), '.webpack/renderer', fileUrl);
    callback(filePath);
  });

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// LocalStorage data validation helper
const validateAndFilterLocalStorageData = (data: any): { valid: boolean; filtered: any; error?: string; warnings?: string[] } => {
  try {
    console.log('Validating localStorage data:', data);
    
    if (!data || typeof data !== 'object') {
      return { valid: false, filtered: {}, error: 'LocalStorage data must be an object' };
    }

    const filtered: Record<string, any> = {};
    const warnings: string[] = [];

    // Define validation rules for known localStorage keys
    const knownKeys = {
      'settings': {
        required: ['showAll', 'wrap', 'preferredTabs'],
        optional: ['updated', 'newUser'],
        defaults: {
          showAll: false,
          wrap: true,
          preferredTabs: {
            searchOrHistory: 'search',
            results: 'combined',
            craftableMaterial: 'common',
          },
          updated: undefined,
          newUser: true
        }
      },
      'regions': {
        required: [],
        optional: ['Asia', 'Europe', 'North America', 'TW, HK, MO'],
        defaults: {}
      },
      'cache': {
        required: [],
        optional: [],
        defaults: {}
      }
    };

    // Process each localStorage key
    for (const [key, value] of Object.entries(data)) {
      try {
        if (knownKeys[key as keyof typeof knownKeys]) {
          // Validate known keys
          const keyConfig = knownKeys[key as keyof typeof knownKeys];
          
          if (key === 'settings') {
            // Validate settings data
            const settingsValidation = validateSettings(value);
            if (settingsValidation.valid) {
              filtered[key] = settingsValidation.filtered;
            } else {
              warnings.push(`Settings validation failed: ${settingsValidation.error}, using defaults`);
              filtered[key] = keyConfig.defaults;
            }
          } else if (key === 'regions') {
            // Validate regions data  
            const regionsValidation = validateRegions(value);
            if (regionsValidation.valid) {
              filtered[key] = regionsValidation.filtered;
            } else {
              warnings.push(`Regions validation failed: ${regionsValidation.error}, using defaults`);
              filtered[key] = keyConfig.defaults;
            }
          } else {
            // For other known keys, store as-is but ensure it's valid JSON
            filtered[key] = value;
          }
        } else {
          // For unknown keys, store as-is if it's valid data
          if (value !== null && value !== undefined) {
            filtered[key] = value;
          }
        }
      } catch (error) {
        warnings.push(`Failed to process key '${key}': ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    }

    if (warnings.length > 0) {
      console.warn('LocalStorage validation warnings:', warnings);
    }

    console.log('LocalStorage validation successful, filtered data:', filtered);
    return { valid: true, filtered, warnings };
  } catch (error) {
    console.error('LocalStorage validation error:', error);
    return { valid: false, filtered: {}, error: error instanceof Error ? error.message : 'Unknown validation error' };
  }
};

// Helper function to validate settings data
const validateSettings = (data: any): { valid: boolean; filtered: any; error?: string } => {
  if (!data || typeof data !== 'object') {
    return { valid: false, filtered: {}, error: 'Settings must be an object' };
  }

  const defaults = {
    showAll: false,
    wrap: true,
    preferredTabs: {
      searchOrHistory: 'search' as const,
      results: 'combined' as const,
      craftableMaterial: 'common' as const,
    },
    updated: undefined,
    newUser: true
  };

  const filtered = { ...defaults };

  // Validate and fix boolean properties
  if (typeof data.showAll === 'boolean') filtered.showAll = data.showAll;
  if (typeof data.wrap === 'boolean') filtered.wrap = data.wrap;
  if (typeof data.newUser === 'boolean') filtered.newUser = data.newUser;
  if (typeof data.updated === 'number' || data.updated === undefined) filtered.updated = data.updated;

  // Validate preferredTabs
  if (data.preferredTabs && typeof data.preferredTabs === 'object') {
    const validTabValues = {
      searchOrHistory: ['search', 'history'],
      results: ['combined', 'artifacts', 'characters'],
      craftableMaterial: ['common', 'rarest']
    };

    for (const [tabKey, validValues] of Object.entries(validTabValues)) {
      if (validValues.includes(data.preferredTabs[tabKey])) {
        (filtered.preferredTabs as any)[tabKey] = data.preferredTabs[tabKey];
      }
    }
  }

  return { valid: true, filtered };
};

// Helper function to validate regions data
const validateRegions = (data: any): { valid: boolean; filtered: any; error?: string } => {
  if (!data || typeof data !== 'object') {
    return { valid: false, filtered: {}, error: 'Regions must be an object' };
  }

  // For regions, we'll be more permissive since the structure can vary
  // Just ensure it's a valid object structure
  const filtered: Record<string, any> = {};
  
  for (const [regionKey, regionData] of Object.entries(data)) {
    if (regionData && typeof regionData === 'object') {
      filtered[regionKey] = regionData;
    }
  }

  return { valid: true, filtered };
};

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
