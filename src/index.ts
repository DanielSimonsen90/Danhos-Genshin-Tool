import { app, BrowserWindow, session, ipcMain, Menu, shell } from 'electron';
import installExtension, { REACT_DEVELOPER_TOOLS } from 'electron-devtools-installer';
import path from 'path';
import UpdateService from './services/UpdateService';
import { PROJECT_GITHUB_URL } from './common/constants/domain';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

app.whenReady().then(() => installExtension(REACT_DEVELOPER_TOOLS));

// Setup IPC handlers for update functionality
const setupIPCHandlers = (): void => {
  ipcMain.handle('check-for-updates', () => UpdateService.checkForUpdates(false));
  ipcMain.handle('get-app-version', () => app.getVersion());
};

// Setup application menu
const setupApplicationMenu = (): void => {
  const template: Electron.MenuItemConstructorOptions[] = [
    {
      label: 'File',
      submenu: [
        {
          label: 'New Window',
          accelerator: process.platform === 'darwin' ? 'Cmd+N' : 'Ctrl+N',
          click: () => createWindow(),
        },
        { type: 'separator' },
        {
          label: 'Quit',
          accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
          click: () => app.quit(),
        },
      ],
    },
    {
      label: 'View',
      submenu: [
        {
          label: 'Reload',
          accelerator: process.platform === 'darwin' ? 'Cmd+R' : 'Ctrl+R',
          click: (item, focusedWindow) => {
            if (focusedWindow) focusedWindow.webContents.reload();
          },
        },
        {
          label: 'Force Reload',
          accelerator: process.platform === 'darwin' ? 'Cmd+Shift+R' : 'Ctrl+Shift+R',
          click: (item, focusedWindow) => {
            if (focusedWindow) focusedWindow.webContents.reloadIgnoringCache();
          },
        },
        { type: 'separator' },
        {
          label: 'Back',
          accelerator: process.platform === 'darwin' ? 'Cmd+Left' : 'Alt+Left',
          click: (item, focusedWindow) => {
            if (focusedWindow && focusedWindow.webContents.canGoBack()) {
              focusedWindow.webContents.goBack();
            }
          },
        },
        {
          label: 'Forward',
          accelerator: process.platform === 'darwin' ? 'Cmd+Right' : 'Alt+Right',
          click: (item, focusedWindow) => {
            if (focusedWindow && focusedWindow.webContents.canGoForward()) {
              focusedWindow.webContents.goForward();
            }
          },
        },
        {
          label: 'Home',
          accelerator: process.platform === 'darwin' ? 'Cmd+H' : 'Ctrl+H',
          click: (item, focusedWindow) => {
            if (focusedWindow) {
              focusedWindow.webContents.executeJavaScript(`
                if (window.location.hash !== '#/') {
                  window.location.hash = '#/';
                }
              `);
            }
          },
        },
        { type: 'separator' },
        {
          label: 'Actual Size',
          accelerator: process.platform === 'darwin' ? 'Cmd+0' : 'Ctrl+0',
          click: (item, focusedWindow) => {
            if (focusedWindow) focusedWindow.webContents.setZoomLevel(0);
          },
        },
        {
          label: 'Zoom In',
          accelerator: process.platform === 'darwin' ? 'Cmd+Plus' : 'Ctrl+Plus',
          click: (item, focusedWindow) => {
            if (focusedWindow) {
              const currentZoom = focusedWindow.webContents.getZoomLevel();
              focusedWindow.webContents.setZoomLevel(currentZoom + 1);
            }
          },
        },
        {
          label: 'Zoom Out',
          accelerator: process.platform === 'darwin' ? 'Cmd+-' : 'Ctrl+-',
          click: (item, focusedWindow) => {
            if (focusedWindow) {
              const currentZoom = focusedWindow.webContents.getZoomLevel();
              focusedWindow.webContents.setZoomLevel(currentZoom - 1);
            }
          },
        },
        { type: 'separator' },
        {
          label: 'Toggle Fullscreen',
          accelerator: process.platform === 'darwin' ? 'Ctrl+Cmd+F' : 'F11',
          click: (item, focusedWindow) => {
            if (focusedWindow) {
              focusedWindow.setFullScreen(!focusedWindow.isFullScreen());
            }
          },
        },
      ],
    },    {
      label: 'Tools',
      submenu: [
        {
          label: 'Clear Cache',
          click: async (item, focusedWindow) => {
            if (focusedWindow) {
              const { dialog } = require('electron');
              const result = await dialog.showMessageBox(focusedWindow, {
                type: 'question',
                title: 'Clear Cache',
                message: 'Are you sure you want to clear the application cache?',
                detail: 'This will reload the application and may improve performance.',
                buttons: ['Clear Cache', 'Cancel'],
                defaultId: 1,
                cancelId: 1,
              });
              
              if (result.response === 0) {
                await focusedWindow.webContents.session.clearCache();
                focusedWindow.webContents.reload();
              }
            }
          },
        },
        {
          label: 'Clear Storage Data',
          click: async (item, focusedWindow) => {
            if (focusedWindow) {
              const { dialog } = require('electron');
              const result = await dialog.showMessageBox(focusedWindow, {
                type: 'warning',
                title: 'Clear Storage Data',
                message: 'Are you sure you want to clear all stored data?',
                detail: 'This will remove all your settings and data. This action cannot be undone.',
                buttons: ['Clear Data', 'Cancel'],
                defaultId: 1,
                cancelId: 1,
              });
              
              if (result.response === 0) {
                await focusedWindow.webContents.session.clearStorageData();
                focusedWindow.webContents.reload();
              }
            }
          },
        },
        { type: 'separator' },
        {
          label: 'Export Settings',
          click: async () => {
            const { dialog } = require('electron');
            const fs = require('fs').promises;
            const userDataPath = app.getPath('userData');
            
            const result = await dialog.showSaveDialog({
              title: 'Export Settings',
              defaultPath: 'genshin-tool-settings.json',
              filters: [
                { name: 'JSON Files', extensions: ['json'] },
                { name: 'All Files', extensions: ['*'] }
              ]
            });
            
            if (!result.canceled && result.filePath) {
              try {
                // You might need to adjust this path based on where your app stores settings
                const settingsPath = path.join(userDataPath, 'settings.json');
                const settingsData = await fs.readFile(settingsPath, 'utf8');
                await fs.writeFile(result.filePath, settingsData);
                
                await dialog.showMessageBox({
                  type: 'info',
                  title: 'Export Successful',
                  message: 'Settings exported successfully!',
                  buttons: ['OK']
                });              } catch (error) {
                await dialog.showMessageBox({
                  type: 'error',
                  title: 'Export Failed',
                  message: 'Failed to export settings.',
                  detail: error instanceof Error ? error.message : 'Unknown error occurred',
                  buttons: ['OK']
                });
              }
            }
          },
        },
        {
          label: 'Import Settings',
          click: async () => {
            const { dialog } = require('electron');
            const fs = require('fs').promises;
            const userDataPath = app.getPath('userData');
            
            const result = await dialog.showOpenDialog({
              title: 'Import Settings',
              filters: [
                { name: 'JSON Files', extensions: ['json'] },
                { name: 'All Files', extensions: ['*'] }
              ],
              properties: ['openFile']
            });
            
            if (!result.canceled && result.filePaths.length > 0) {
              try {
                const importData = await fs.readFile(result.filePaths[0], 'utf8');
                JSON.parse(importData); // Validate JSON
                
                const settingsPath = path.join(userDataPath, 'settings.json');
                await fs.writeFile(settingsPath, importData);
                
                const restartResult = await dialog.showMessageBox({
                  type: 'info',
                  title: 'Import Successful',
                  message: 'Settings imported successfully!',
                  detail: 'The application needs to restart to apply the new settings.',
                  buttons: ['Restart Now', 'Restart Later'],
                  defaultId: 0
                });
                
                if (restartResult.response === 0) {
                  app.relaunch();
                  app.exit();
                }
              } catch (error) {
                await dialog.showMessageBox({
                  type: 'error',
                  title: 'Import Failed',
                  message: 'Failed to import settings.',
                  detail: 'The file may be corrupted or in an invalid format.',
                  buttons: ['OK']
                });
              }
            }
          },
        },
      ],
    },
    {
      label: 'Help',
      submenu: [
        {
          label: 'Check for Updates',
          click: () => UpdateService.checkForUpdates(),
        },
        {
          label: 'Toggle Developer Tools',
          accelerator: process.platform === 'darwin' ? 'Cmd+Option+I' : 'Ctrl+Shift+I',
          click: (item, focusedWindow) => {
            if (focusedWindow) focusedWindow.webContents.toggleDevTools();
          },
        },
        { type: 'separator' },
        {
          label: 'GitHub Repository',
          click: () => shell.openExternal(PROJECT_GITHUB_URL),
        },
      ],
    },
  ];

  // macOS specific menu adjustments
  if (process.platform === 'darwin') {
    template.unshift({
      label: app.getName(),
      submenu: [
        { role: 'about' },
        { type: 'separator' },
        { role: 'services' },
        { type: 'separator' },
        { role: 'hide' },
        { role: 'hideOthers' },
        { role: 'unhide' },
        { type: 'separator' },
        { role: 'quit' },
      ],
    });
  }

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // Set the main window for the update service
  UpdateService.setMainWindow(mainWindow);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (process.env.NODE_ENV === 'development') mainWindow.webContents.openDevTools();

  // Set up application menu with update option
  setupApplicationMenu();

  // Check for updates after the window is ready (delay to ensure proper initialization)
  mainWindow.webContents.once('did-finish-load', () => {
    setTimeout(() => {
      UpdateService.checkForUpdates();
    }, UpdateService.CHECK_FOR_UPDATE_DELAY_MS); // Wait 3 seconds after app launch
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  // Setup IPC handlers
  setupIPCHandlers();

  // Customize protocol to handle static resource.
  session.defaultSession.protocol.registerFileProtocol('static', (request, callback) => {
    const fileUrl = request.url.replace('static://', '');
    const filePath = path.join(app.getAppPath(), '.webpack/renderer', fileUrl);
    callback(filePath);
  });

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
